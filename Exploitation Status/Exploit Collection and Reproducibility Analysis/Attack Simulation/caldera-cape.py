import requests, time, json, ansible_runner, threading

def install_caldera_blue(): #function to install caldera blue on victim VMs
    r = ansible_runner.run(private_data_dir='.', playbook='install-caldera-blue.yml', inventory='inventory.ini') #run the caldera blue ansible playbook

#get config
with open('config.json') as config:
  config_info = json.load(config)


api_url = "http://" + config_info.get('caldera_ip') + ":8888/api/v2/adversaries"
caldera_red_headers = {"Content-Type":"application/json", "KEY":config_info.get('caldera_red_token')}
response = requests.get(api_url, headers=caldera_red_headers)
response = response.json()

adversary_ids = [] #create an array to store adversary ids
num_adversaries = 0

#for i in response:
#    adversary_ids.append([i.get('adversary_id'), i.get('name')])
#    num_adversaries+=1

adversary_ids.append([response[13].get('adversary_id'), response[13].get('name')]) #for testing

for adversary in adversary_ids:
  url = 'http://' + config_info.get('cape_ip') + ':8000/apiv2/tasks/create/file/'
  cape_headers = {'Authorization': 'Token '+ config_info.get('cape_token')}
  file = {
      'file': open('splunkd.exe', 'rb'),
  }
  data = {
      'options': 'arguments=-server http://' + config_info.get('caldera_ip') + ':8888 -group red',
      'machine' : 'win10-1',
      'timeout' : '200',
      'custom' : adversary[1] #adversary name
  }


  task_ids = []

  for i in range(config_info.get('times_to_submit')): #submit the caldera agent to capev2
      file = {
          'file': open('splunkd.exe', 'rb'),
      }
      r = requests.post(url, headers=cape_headers, files=file, data=data)
      if(r.json().get('error') == False):
        task_ids.append(r.json().get('data').get('task_ids')[0])
      else:
          print(r.json().get('error'))
      

  print(task_ids)
  print('tasks created in CAPEv2')


  api_url = "http://" + config_info.get('caldera_ip') + ":8888/api/v2/agents"
  active_count = 0

  while(active_count < config_info.get('times_to_submit')): #wait for all of the agents to be active
    response = requests.get(api_url, headers=caldera_red_headers)
    response = response.json()
    active_count = 0
    for i in response:
      if(i.get('trusted')) == True:
        active_count += 1
    time.sleep(15) #poll every 15 seconds

  print('red team agents active, installing blue team agents...')
  thread = threading.Thread(target=install_caldera_blue)
  thread.start()

  print('creating red team operation...')

  # create a red team operation
  api_url = "http://" + config_info.get('caldera_ip') + ":8888/api/v2/operations"
  data = {
    "name": adversary[1], #name of current adversary
    "adversary": {
      "adversary_id": adversary[0], #id of current adversary
    },
    "source": {
      "id": "ed32b9c3-9593-4c33-b0db-e2007315096b" #id of "basic" fact source
    },
    "planner": {
      "id": "aaa7c857-37a0-4c4a-85f7-4e9f7f30e31a" #id of "atomic" planner
    }
  }
  response = requests.post(api_url, headers=caldera_red_headers, json=data)

  print('red team operation created')

  # create a blue team response operation

  api_url = "http://" + config_info.get('caldera_ip') + ":8888/api/v2/agents"
  caldera_blue_headers = {"Content-Type":"application/json", "KEY":config_info.get('caldera_blue_token')}

  active_count = 0

  while(active_count < config_info.get('times_to_submit')): #wait for all of the agents to be active
      response = requests.get(api_url, headers=caldera_blue_headers)
      response = response.json()
      active_count = 0
      for i in response:
          if(i.get('trusted')) == True:
              active_count += 1
      time.sleep(15) #poll every 15 seconds

  print('blue team agents active, creating operation in Caldera...')

  # create an operation
  api_url = "http://" + config_info.get('caldera_ip') + ":8888/api/v2/operations"
  blue_team_name = 'Incident Responder for ' + adversary[1]
  data = {
      "name": blue_team_name, #name 
      "adversary": {
          "adversary_id": "7e422753-ad7a-4401-bc8b-b12a28e69c25" #id of 'Incident responder' adversary
      },
      "source": {
          "id": "e1ceccf2-92b3-4a28-ade5-5f67a2dfd7e7" #id of "response" fact source
      },
      "planner": {
          "id": "788107d5-dc1e-4204-9269-38df0186d3e7" #id of "batch" planner
      }
      }
  response = requests.post(api_url, headers=caldera_blue_headers, json=data)
  print('blue team operation created')  

  #check if cape is done
  url = 'http://' + config_info.get('cape_ip') + ':8000/apiv2/tasks/status/'
  done_tasks = 0
  print(task_ids)
  while(done_tasks < config_info.get('times_to_submit')):
    done_tasks = 0 #reset counter
    for id in task_ids:
        id_url = url+str(id)
        r = requests.get(id_url, headers=cape_headers)
        r = r.json()
        print(r)
        if(r.get('data')=='reported'):
          done_tasks += 1
    #print(done_tasks)
    time.sleep(15) #poll every 15 seconds

  url = 'http://' + config_info.get('cape_ip') + ':8000/apiv2/tasks/get/report/'
  for id in task_ids:
    id_url = url+str(id)
    r = requests.get(id_url, headers = cape_headers)
    file_name = str(id) + '_' + adversary[1] + '.json'
    file = open(file_name, 'w')
    json.dump(r.json(), file)
    file.close()
    string_to_print = 'completed ' + adversary[1] + ' and cape id: ' + str(id)
    print(string_to_print)
    print('waiting 30s for everything to reset...')
    time.sleep(30)
  thread.join() # join the ansible thread