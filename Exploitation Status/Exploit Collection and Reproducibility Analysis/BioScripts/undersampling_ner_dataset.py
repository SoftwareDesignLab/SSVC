import json
import csv
import random
import pandas as pd
from collections import defaultdict

def map_labels(label):
    label_mapping = {
        'Published dates': 'Published_dates',
        'Host Information': 'Host_Information',
        'Proof of Concept': 'Proof_of_Concept',
        'Steps to Reproduce': 'Steps_to_Reproduce',
        'Version Number': 'Version_Number',
        'Vulnerability Type': 'Vulnerability_Type',
    }
    return label_mapping.get(label, label)

def extract_entities(text, entities):
    words = text.split()
    bio_labels = ['O'] * len(words)

    for entity in entities:
        label = entity['label']
        label = map_labels(label)  # Map the multi-word labels to single labels
        start_offset = entity['start_offset']
        end_offset = entity['end_offset']

        # Find the word indices corresponding to the start and end offsets
        start_word_idx = len(text[:start_offset].split())
        end_word_idx = len(text[:end_offset].split())

        # Check if start_word_idx exceeds the available word indices
        if start_word_idx >= len(bio_labels):
            continue  # Skip this entity as it is out of range

        # Check if end_word_idx exceeds the available word indices
        end_word_idx = min(end_word_idx, len(bio_labels))

        # Assign 'B-' label to the start of the entity
        bio_labels[start_word_idx] = 'B-' + label

        # Assign 'I-' label to the rest of the entity
        for i in range(start_word_idx + 1, end_word_idx):
            bio_labels[i] = 'I-' + label

    return bio_labels

def count_b_labels(csv_file):
    df = pd.read_csv(csv_file)
    total_b_labels = 0

    for label in df['label']:
        for string in label.split():
            if string.startswith('B-'):
                total_b_labels += 1
    
    return total_b_labels

def convert_to_csv(jsonl_file, csv_file, invalid_json_file, original_csv_file):
    num_b_labels = count_b_labels(original_csv_file)

    with open(jsonl_file, 'r', encoding='utf-8') as f:
        annotations = []
        invalid_json_lines = []
        for line in f:
            try:
                annotation = json.loads(line.strip(), strict=False)
                annotations.append(annotation)
            except json.JSONDecodeError:
                invalid_json_lines.append(line)

    # Save invalid JSON lines to a separate file
    with open(invalid_json_file, 'w', encoding='utf-8') as f:
        f.writelines(invalid_json_lines)

    with open(csv_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['text', 'label'])
        '''
        # first pass: count Bs, collect Os
        create dict mapping annotation number to indices of Os in that annotation
        for each annotation:
            add list/set of O indices to annotation number dict
        randomly sample O indices equal to num of Bs
        create new dict for O indices to keep 
        # second pass: form text from B indices and select O indices, insert into csv
        for each annotation:
            get text for Bs
            remove O indices from removing dict
            get text for remaining Os
            combine text to create csv row
            insert csv row
        '''
        o_ix_map = {}
        for ix, annotation in enumerate(annotations):
            text = annotation['text']
            entities = annotation['entities']
            bio_labels = extract_entities(text, entities)
            o_ix_map[ix] = [i for i, label in enumerate(bio_labels) if label == 'O']

        random.seed(2)
        all_o_ixs = [(ann_ix, o_ix) for ann_ix in o_ix_map for o_ix in o_ix_map[ann_ix]]
        all_o_ixs = random.sample(all_o_ixs, num_b_labels)
        keep_o_ix_map = defaultdict(set)
        for tup in all_o_ixs:
            keep_o_ix_map[tup[0]].add(tup[1])

        for ann_ix, annotation in enumerate(annotations):
            text = annotation['text']
            text_split = text.split()
            entities = annotation['entities']
            bio_labels = extract_entities(text, entities)

            result_text = []
            result_labels = []
            for i, label in enumerate(bio_labels):
                if not label.startswith('O') or i in keep_o_ix_map[ann_ix]:
                    result_labels.append(label)
                    result_text.append(text_split[i] if i < len(text_split) else '')

            kept_text = ' '.join(result_text)
            labels_str = ' '.join(result_labels)
            writer.writerow([kept_text, labels_str])

if __name__ == '__main__':
    jsonl_file_name = 'all.jsonl'
    csv_file_name = 'balanced_bio.csv'
    invalid_json_file_name = 'undersampling_invalid_json_lines.txt'
    original_csv_file_name = 'ner.csv'
    convert_to_csv(jsonl_file_name, csv_file_name, invalid_json_file_name, original_csv_file_name)
