import json
import csv

def map_labels(label):
    label_mapping = {
        'Published dates': 'Published_dates',
        'Host Information': 'Host_Information',
        'Proof of Concept': 'Proof_of_Concept',
        'Steps to Reproduce': 'Steps_to_Reproduce',
        'Version Number': 'Version_Number',
        'Vulnerability Type': 'Vulnerability_Type'
    }
    return label_mapping.get(label, label)

def extract_entities(text, entities):
    words = text.split()
    bio_labels = ['O'] * len(words)

    for entity in entities:
        label = entity['label']
        label = map_labels(label)  # Map the multi-word labels to single labels
        start_offset = entity['start_offset']
        end_offset = entity['end_offset']

        # Find the word indices corresponding to the start and end offsets
        start_word_idx = len(text[:start_offset].split())
        end_word_idx = len(text[:end_offset].split())

        # Check if start_word_idx exceeds the available word indices
        if start_word_idx >= len(bio_labels):
            continue  # Skip this entity as it is out of range

        # Check if end_word_idx exceeds the available word indices
        end_word_idx = min(end_word_idx, len(bio_labels))

        # Assign 'B-' label to the start of the entity
        bio_labels[start_word_idx] = 'B-' + label

        # Assign 'I-' label to the rest of the entity
        for i in range(start_word_idx + 1, end_word_idx):
            bio_labels[i] = 'I-' + label

    return bio_labels

def convert_to_csv(jsonl_file, csv_file, invalid_json_file):
    with open(jsonl_file, 'r', encoding='utf-8') as f:
        annotations = []
        invalid_json_lines = []
        for line in f:
            try:
                annotation = json.loads(line.strip(), strict=False)
                annotations.append(annotation)
            except json.JSONDecodeError:
                invalid_json_lines.append(line)

    # Save invalid JSON lines to a separate file
    with open(invalid_json_file, 'w', encoding='utf-8') as f:
        f.writelines(invalid_json_lines)

    with open(csv_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['text', 'label'])

        for annotation in annotations:
            text = annotation['text']
            entities = annotation['entities']

            bio_labels = extract_entities(text, entities)

            # Join words and labels into a single string with spaces and write to the CSV file
            text_with_labels = ' '.join([word for word in text.split()])
            labels = ' '.join([label for label in bio_labels])
            writer.writerow([text_with_labels, labels])

def create_multi_label_csv(jsonl_file, csv_file):
    with open(jsonl_file, 'r', encoding='utf-8') as f:
        annotations = []
        for line in f:
            annotation = json.loads(line.strip(), strict=False)
            annotations.append(annotation)

    with open(csv_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['doccano_id', 'label_1', 'label_2', 'csv_line', 'jsonl_line'])

        for idx, annotation in enumerate(annotations, start=1):  # JSONL starts on line 1
            text = annotation['text']
            entities = annotation['entities']
            doccano_id = annotation['id']

            labels = [entity['label'] for entity in entities]
            offsets = [(entity['start_offset'], entity['end_offset']) for entity in entities]

            for i in range(len(entities)):
                for j in range(i + 1, len(entities)):
                    if entities[i]['start_offset'] <= entities[j]['end_offset'] and entities[i]['end_offset'] >= entities[j]['start_offset']:
                        label_1 = labels[i]
                        label_2 = labels[j]

                        # Check if the overlapping labels are different
                        if label_1 != label_2:
                            csv_line = idx + 1  # CSV starts on line 2 due to header
                            jsonl_line = idx

                            writer.writerow([doccano_id, label_1, label_2, csv_line, jsonl_line])

if __name__ == '__main__':
    jsonl_file_name = 'all.jsonl'
    csv_file_name = 'ner.csv'
    multi_label_csv_file_name = 'multi_label.csv'
    invalid_json_file_name = 'invalid_json_lines.txt'

    convert_to_csv(jsonl_file_name, csv_file_name, invalid_json_file_name)
    create_multi_label_csv(jsonl_file_name, multi_label_csv_file_name)
