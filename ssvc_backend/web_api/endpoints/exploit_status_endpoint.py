import os
from pathlib import Path
from flask import make_response, jsonify, request
from flask_restful import Resource
from ssvc_backend.exploit_status.exploit_status_backend import get_exploit_status

class ExploitStatusApi(Resource):
    def get(self):
        """
        Method to get the exploit status for a specific cve
        :return:
        """

        query = request.args.to_dict()
        cve_id = query['cveId'] if 'cveId' in query else None

        if cve_id is None or cve_id == "":
            response_data = {
                "message": "There was an error with your request. Please ensure you inputted a valid CVE ID and proper delay with requests."
            }
            response = make_response(jsonify(response_data), 400)
            response.headers["Content-Type"] = "application/json"
            return response


        # access exploit status setting the working directory into
        status, rationale = get_exploit_status(cve_id, working_dir=os.path.join(os.path.dirname(__file__), "..", ".."), print_status=False)

        # package respones into dictionary to convert into json
        if status is not None:
            # respond normally with a cave id and an the exploit status
            response_data = {
                "cveId": cve_id,
                "exploitStatus": status,
                "exploitStatusRationale": rationale
            }
        else:
            # if the status is None, an error occured, send a message to the user
            response_data = {
                "cveId": cve_id,
                "message": "There was an error with your request. Please ensure you inputted a valid CVE ID and proper delay with requests."
            }
        response = make_response(jsonify(response_data), 200 if status is not None else 400)
        response.headers["Content-Type"] = "application/json"
        return response